{"version":3,"sources":["components/navbar.js","components/user.js","components/Users.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","title","defaultProps","User","state","isVisible","onClickEvent","number","e","setState","onDeleteUser","id","deleteUser","this","name","department","salary","className","onClick","style","cursor","Component","Users","users","console","log","map","user","key","App","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAEC,SAASA,EAAOC,GACb,OACI,6BACI,4BAAKA,EAAMC,QASvBF,EAAOG,aAAa,CAChBD,MAAM,eAEKF,QCdTI,E,2MACFC,MAAM,CACFC,WAAU,G,EAYdC,aAAa,SAACC,EAAOC,GACjB,EAAKC,SAAS,CACVJ,WAAa,EAAKD,MAAMC,a,EAIhCK,aAAa,SAACF,GAAK,IAAD,EACO,EAAKR,MAApBW,EADQ,EACRA,IACNC,EAFc,EACLA,YACED,I,wEAIN,MAGyBE,KAAKb,MAA7Bc,EAHD,EAGCA,KAAKC,EAHN,EAGMA,WAAWC,EAHjB,EAGiBA,OAChBX,EAAWQ,KAAKT,MAAhBC,UACN,OACI,yBAAKY,UAAU,iBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,8CACX,wBAAIA,UAAU,WAAWC,QAASL,KAAKP,cAAeQ,GACtD,uBAAGI,QAASL,KAAKH,aAAcO,UAAU,mBAAmBE,MAAO,CAACC,OAAO,cAI3Ef,EAAY,yBAAKY,UAAU,aAC3B,uBAAGA,UAAU,aAAb,cAAgCD,GAChC,uBAAGC,UAAU,aAAb,cAAqCF,IAEhC,W,GA5CVM,aAsDnBlB,EAAKD,aAAa,CACdY,KAAK,YACLE,OAAO,YACPD,WAAW,aAUCZ,QCtCDmB,E,iLA3BD,IAAD,EACmBT,KAAKb,MAAvBuB,EADD,EACCA,MAAMX,EADP,EACOA,WAEX,OADDY,QAAQC,IAAIF,GAER,6BAEQA,EAAMG,KAAI,SAAAC,GACN,OACI,kBAAC,EAAD,CACAC,IAAKD,EAAKhB,GACVA,GAAIgB,EAAKhB,GACTG,KAAMa,EAAKb,KACXE,OAAQW,EAAKX,OACbD,WAAYY,EAAKZ,WACjBH,WAAYA,Y,GAfpBS,aC8CLQ,E,2MA3CbzB,MAAM,CACJmB,MAAM,CAAC,CACLZ,GAAG,EACHG,KAAK,6BACLE,OAAO,OACPD,WAAW,MAEb,CACEJ,GAAG,EACHG,KAAK,eACLE,OAAO,OACPD,WAAW,MAEb,CACEJ,GAAG,EACHG,KAAK,oBACLE,OAAO,OACPD,WAAW,Q,EAIjBH,WAAW,SAACD,GACV,EAAKF,SAAS,CACZc,MAAM,EAAKA,MAAMO,QAAO,SAAAH,GAAI,OAAEhB,IAAMgB,EAAKhB,S,wEAO3C,OACE,yBAAKM,UAAU,aACb,kBAAC,EAAD,CAAQhB,MAAM,aACd,6BACA,kBAAC,EAAD,CAAOW,WAAYC,KAAKD,WAAYW,MAAOV,KAAKT,MAAMmB,a,GApC1CF,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.018fb5c1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\n function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n        </div>\r\n    )\r\n}\r\n// with prop types requirement can control\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired\r\n\r\n}\r\nNavbar.defaultProps={\r\n    title:\"Default App\"\r\n}\r\nexport default Navbar","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\"\r\n\r\nclass User extends Component {\r\n    state={\r\n        isVisible:false\r\n    }\r\n    // constructor(props){\r\n    //     super(props)\r\n    //     this.state={\r\n    //         isVisible:false\r\n    //     }\r\n    // constructor(props){\r\n    //     super(props)\r\n    //     this.onClickEvent=this.onClickEvent.bind(this);\r\n    // }\r\n    // methods must bind in render function with this but if function is array function then binding is automatic\r\n    onClickEvent=(number,e)=>{\r\n        this.setState({\r\n            isVisible : !this.state.isVisible\r\n        })\r\n\r\n    }\r\n    onDeleteUser=(e)=>{\r\n        const{id,deleteUser}=this.props;\r\n        deleteUser(id);\r\n    }\r\n    \r\n\r\n    render() {\r\n        \r\n        //Destructing : with this.props easily use variables\r\n        const{name,department,salary}=this.props;\r\n        const{isVisible}=this.state;\r\n        return (\r\n            <div className=\"col-md-8 mb-4\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header d-flex justify-content-between\">\r\n                        <h4 className=\"d-inline\" onClick={this.onClickEvent}>{name}</h4>\r\n                        <i onClick={this.onDeleteUser} className=\"fas fa-trash-alt\" style={{cursor:\"pointer\" }}></i>\r\n\r\n                    </div>\r\n                    {\r\n                        isVisible ? <div className=\"card-body\">\r\n                        <p className=\"card-text\">Maaş: {salary}</p>\r\n                        <p className=\"card-text\">Departman: {department}</p>\r\n                        \r\n                    </div> : null\r\n                    }\r\n                    \r\n                </div>\r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nUser.defaultProps={\r\n    name:\"Bilgi yok\",\r\n    salary:\"Bilgi yok\",\r\n    department:\"Bilgi yok\"\r\n}\r\nUser.propTypes={\r\n    name:PropTypes.string.isRequired,\r\n    salary:PropTypes.string.isRequired,\r\n    department:PropTypes.string.isRequired,\r\n    deleteUser:PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default  User","import React, { Component } from 'react'\r\nimport User from \"./user\"\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Users extends Component {\r\n    render() {\r\n        const{users,deleteUser}=this.props;\r\n        console.log(users)\r\n         return (\r\n            <div>\r\n                {\r\n                    users.map(user=>{\r\n                        return (\r\n                            <User\r\n                            key={user.id}\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            salary={user.salary}\r\n                            department={user.department}\r\n                            deleteUser={deleteUser}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nUsers.propTypes={\r\n    users:PropTypes.array.isRequired,\r\n    deleteUser:PropTypes.func.isRequired\r\n}\r\nexport default Users;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar\"\n//import User from \"./components/user\"\nimport Users from \"./components/Users\"\nclass App extends Component{\n//function App() {\n  state={\n    users:[{\n      id:1,\n      name:\"Gül Şira Avcı\",\n      salary:\"2000\",\n      department:\"IT\"\n    },\n    {\n      id:2,\n      name:\"Sinan Kaplan\",\n      salary:\"7000\",\n      department:\"IT\"\n    },\n    {\n      id:3,\n      name:\"Murat Coşkun\",\n      salary:\"5000\",\n      department:\"IT\"\n    }\n  ]\n}\ndeleteUser=(id)=>{\n  this.setState({\n    users:this.users.filter(user=>id !==user.id)\n\n  })\n\n}\nrender(){\n\n  return (\n    <div className=\"container\">\n      <Navbar title=\"User App\"/>\n      <hr/>\n      <Users deleteUser={this.deleteUser} users={this.state.users}/>\n      \n\n      \n  \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}